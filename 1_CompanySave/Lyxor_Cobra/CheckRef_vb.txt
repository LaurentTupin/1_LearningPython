import pyodbc
import pandas
import datetime

server = 	'<Criteria1>'
db1 = 		'<Criteria2>'
fileFolder = 	'<Criteria3>'
FolderBloom = 	'<Criteria4>'
FileBloom = 	'<Criteria5>'


def getLiveEtfListings(region):
    if region == "United States":
        region = "'United States', 'Canada', 'Latin America'"
    elif region == "Europe LSE":
        region = "'Europe'"
    elif region == "Europe Ex LSE":
        region = "'Europe'"
    else:
        region = "'" + region + "'"

    cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + server + ';DATABASE=' + db1)
    cursor = cnxn.cursor()
    cursor.execute("SELECT R.str_Bbg, R.str_IsinName, R.str_IsinLongName, R.str_IncpnCountry, "
                   "    R.bt_IsPrimary, R.str_Issuer, R.str_AssetClassLvl1, R.str_Exchange, (CASE WHEN R.bt_isPEAble=1 THEN 'Yes' ELSE 'No' END) bt_isPEAble, R.str_DivFrequency, "
                   "    R.str_Currency, R.str_Isin, R.str_IndexTracked, R.str_ReplicationType, R.bt_SwapBased, R.dte_IsinStartDate, "
                   "    R.bt_IsActivelyManaged, R.flt_Ter "
                   "FROM V_Ref_EtfIsinListing R "
                   "WHERE '" + str(datetime.date.today()) + "' BETWEEN R.dte_ListingStartDate AND R.dte_ListingEndDate "
                   "    AND R.str_Region IN (" + region + ") "
                   )
    return pandas.DataFrame.from_records(cursor.fetchall(), columns=[i[0] for i in cursor.description])



def generateCheckFile(region):
    if region == "United States":
        excelfile = FolderBloom + 'ETF_US.xls'
    elif region == "Asia Pacific":
        excelfile = FolderBloom + 'ETF_ASIA.xls'
    elif region == "Europe LSE":
        excelfile = FolderBloom + 'ETF_EUROPE_LSE_Active.xls'
    elif region == "Europe Ex LSE":
        excelfile = FolderBloom + 'ETF_EUROPE_EX_LSE_Active.xls'
    # else:
    #     excelfile = FolderBloom + 'ETF_EUROPE_Active.xls'

    bbgdf = pandas.read_excel(excelfile)
    bbgdf['Ticker\n'] = bbgdf['Ticker\n'].replace(' Equity$', '', regex=True)
    bbgdf['Ticker\n'] = bbgdf['Ticker\n'].replace(' GR$', ' GY', regex=True)
    bbgdf['Ticker\n'][bbgdf['Primary Exchange\n'] == 'Stuttgart'] = bbgdf['Ticker\n'][bbgdf['Primary Exchange\n'] == 'Stuttgart'].replace(' GY$', ' GS', regex=True)

    dbdf = getLiveEtfListings(region)

    etf_missing_in_db = pandas.merge(bbgdf, dbdf, how='left', left_on=['Ticker\n'], right_on=['str_Bbg'])
    etf_missing_in_db = etf_missing_in_db[pandas.isnull(etf_missing_in_db['str_Bbg'])]

    etf_common = pandas.merge(bbgdf, dbdf, how='inner', left_on=['Ticker\n'], right_on=['str_Bbg'])

    # Diff benchmark
    etf_diff_benchmark = etf_common[(etf_common['ETF Underl. Idx Ticker\n'] != etf_common['str_IndexTracked']) & (etf_common['ETF Underl. Idx Ticker\n'] != 'N.A.') & (etf_common['bt_IsPrimary'] == 1)]
    etf_diff_benchmark_lyxor = etf_common[(etf_common['ETF Underl. Idx Ticker\n'] != etf_common['str_IndexTracked']) & (etf_common['ETF Underl. Idx Ticker\n'] != 'N.A.') & (etf_common['bt_IsPrimary'] == 1) & (etf_common['str_Issuer'] == 'LYXOR')]

    # Diff TER
    etf_diff_ter = etf_common[(etf_common['Expense Ratio\n'] != etf_common['flt_Ter']) & (etf_common['Expense Ratio\n'] != 'N.A.')]

    # Diff Name
    etf_diff_name = etf_common[(etf_common['Long Name\n'] != etf_common['str_IsinLongName']) & (etf_common['Long Name\n'] != 'N.A.') & (etf_common['bt_IsPrimary'] == 1)]

    # Diff Div Freq
    etf_diff_divfreq = etf_common[(etf_common['Dvd Freq.\n'] != etf_common['str_DivFrequency']) & (etf_common['Dvd Freq.\n'] != 'N.A.') & (etf_common['bt_IsPrimary'] == 1)]

   # Diff ISIN
    etf_diff_isin = etf_common[(etf_common['ISIN\n'] != etf_common['str_Isin']) & (etf_common['bt_IsPrimary'] == 1)]

    # Diff PEA
    etf_diff_pea = etf_common[(etf_common['Is PEA\n'] != etf_common['bt_isPEAble']) & (etf_common['bt_IsPrimary'] == 1)]


    writer = pandas.ExcelWriter(fileFolder + 'ETF_Check' + region.replace(' ', '') + '.xlsx')
    etf_missing_in_db[['Ticker\n', 'ISIN\n', 'Long Name\n', 'ETF Underl. Idx Ticker\n', 'Inception Date\n', 'Expense Ratio\n', 'Curr\n']].to_excel(writer, 'New tickers', index=False)
    etf_diff_benchmark[['str_Issuer', 'str_IsinLongName', 'Ticker\n', 'str_Isin', 'ETF Underl. Idx Ticker\n', 'str_IndexTracked']].to_excel(writer, 'Benchmark', index=False)
    etf_diff_benchmark_lyxor[['str_Issuer', 'str_IsinLongName', 'Ticker\n', 'str_Isin', 'ETF Underl. Idx Ticker\n', 'str_IndexTracked']].to_excel(writer, 'Benchmark Lyxor', index=False)
    etf_diff_ter[['str_Issuer', 'str_IsinLongName', 'Ticker\n', 'str_Isin', 'Expense Ratio\n', 'flt_Ter']].to_excel(writer, 'TER', index=False)
    etf_diff_name[['str_Issuer', 'Ticker\n', 'str_Isin', 'Long Name\n', 'str_IsinLongName']].to_excel(writer, 'Name', index=False)
    etf_diff_divfreq[['str_Issuer', 'str_IsinLongName', 'Ticker\n', 'str_Isin', 'Dvd Freq.\n', 'str_DivFrequency']].to_excel(writer, 'Div Freq', index=False)
    etf_diff_isin[['str_Issuer', 'str_IsinLongName', 'Ticker\n', 'ISIN\n', 'str_Isin']].to_excel(writer, 'ISIN', index=False)
    if region == "Europe":
        etf_diff_isin[['str_Issuer', 'str_IsinLongName', 'Ticker\n', 'Is PEA\n', 'bt_isPEAble']].to_excel(writer, 'PEA', index=False)
    writer.save()


generateCheckFile(FileBloom)
